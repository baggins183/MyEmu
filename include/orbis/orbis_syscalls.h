// Values found at https://github.com/astrelsky/GhidraOrbis

#pragma once
#include <map>
#include <string>

#define ORBIS_SYSCALL_TABLE(OP) \
	OP(1, SYS_exit) \
	OP(2, SYS_fork) \
	OP(3, SYS_read) \
	OP(4, SYS_write) \
	OP(5, SYS_open) \
	OP(6, SYS_close) \
	OP(7, SYS_wait4) \
	OP(9, SYS_link) \
	OP(10, SYS_unlink) \
	OP(12, SYS_chdir) \
	OP(13, SYS_fchdir) \
	OP(14, SYS_mknod) \
	OP(15, SYS_chmod) \
	OP(16, SYS_chown) \
	OP(20, SYS_getpid) \
	OP(21, SYS_mount) \
	OP(22, SYS_unmount) \
	OP(23, SYS_setuid) \
	OP(24, SYS_getuid) \
	OP(25, SYS_geteuid) \
	OP(26, SYS_ptrace) \
	OP(27, SYS_recvmsg) \
	OP(28, SYS_sendmsg) \
	OP(29, SYS_recvfrom) \
	OP(30, SYS_accept) \
	OP(31, SYS_getpeername) \
	OP(32, SYS_getsockname) \
	OP(33, SYS_access) \
	OP(34, SYS_chflags) \
	OP(35, SYS_fchflags) \
	OP(36, SYS_sync) \
	OP(37, SYS_kill) \
	OP(39, SYS_getppid) \
	OP(41, SYS_dup) \
	OP(42, SYS_pipe) \
	OP(43, SYS_getegid) \
	OP(44, SYS_profil) \
	OP(45, SYS_ktrace) \
	OP(47, SYS_getgid) \
	OP(49, SYS_getlogin) \
	OP(50, SYS_setlogin) \
	OP(53, SYS_sigaltstack) \
	OP(54, SYS_ioctl) \
	OP(55, SYS_reboot) \
	OP(56, SYS_revoke) \
	OP(57, SYS_symlink) \
	OP(58, SYS_readlink) \
	OP(59, SYS_execve) \
	OP(60, SYS_umask) \
	OP(61, SYS_chroot) \
	OP(65, SYS_netbsd_msync) \
	OP(66, SYS_vfork) \
	OP(69, SYS_sbrk) \
	OP(70, SYS_sstk) \
	OP(73, SYS_munmap) \
	OP(74, SYS_mprotect) \
	OP(75, SYS_madvise) \
	OP(78, SYS_mincore) \
	OP(79, SYS_getgroups) \
	OP(80, SYS_setgroups) \
	OP(81, SYS_getpgrp) \
	OP(82, SYS_setpgid) \
	OP(83, SYS_setitimer) \
	OP(85, SYS_swapon) \
	OP(86, SYS_getitimer) \
	OP(89, SYS_getdtablesize) \
	OP(90, SYS_dup2) \
	OP(92, SYS_fcntl) \
	OP(93, SYS_select) \
	OP(95, SYS_fsync) \
	OP(96, SYS_setpriority) \
	OP(97, SYS_socket) \
	OP(98, SYS_connect) \
	OP(99, SYS_netcontrol) \
	OP(100, SYS_getpriority) \
	OP(101, SYS_netabort) \
	OP(102, SYS_netgetsockinfo) \
	OP(104, SYS_bind) \
	OP(105, SYS_setsockopt) \
	OP(106, SYS_listen) \
	OP(113, SYS_socketex) \
	OP(114, SYS_socketclose) \
	OP(116, SYS_gettimeofday) \
	OP(117, SYS_getrusage) \
	OP(118, SYS_getsockopt) \
	OP(120, SYS_readv) \
	OP(121, SYS_writev) \
	OP(122, SYS_settimeofday) \
	OP(123, SYS_fchown) \
	OP(124, SYS_fchmod) \
	OP(125, SYS_netgetiflist) \
	OP(126, SYS_setreuid) \
	OP(127, SYS_setregid) \
	OP(128, SYS_rename) \
	OP(131, SYS_flock) \
	OP(132, SYS_mkfifo) \
	OP(133, SYS_sendto) \
	OP(134, SYS_shutdown) \
	OP(135, SYS_socketpair) \
	OP(136, SYS_mkdir) \
	OP(137, SYS_rmdir) \
	OP(138, SYS_utimes) \
	OP(140, SYS_adjtime) \
	OP(141, SYS_kqueueex) \
	OP(147, SYS_setsid) \
	OP(154, SYS_shmctl) \
	OP(155, SYS_nfssvc) \
	OP(165, SYS_sysarch) \
	OP(166, SYS_rtprio) \
	OP(181, SYS_setgid) \
	OP(182, SYS_setegid) \
	OP(183, SYS_seteuid) \
	OP(188, SYS_stat) \
	OP(189, SYS_fstat) \
	OP(190, SYS_lstat) \
	OP(191, SYS_pathconf) \
	OP(192, SYS_fpathconf) \
	OP(194, SYS_getrlimit) \
	OP(195, SYS_setrlimit) \
	OP(196, SYS_getdirentries) \
	OP(202, SYS___sysctl) \
	OP(203, SYS_mlock) \
	OP(204, SYS_munlock) \
	OP(206, SYS_futimes) \
	OP(207, SYS_getpgid) \
	OP(209, SYS_poll) \
	OP(210, SYS_lkmnosys) \
	OP(232, SYS_clock_gettime) \
	OP(233, SYS_clock_settime) \
	OP(234, SYS_clock_getres) \
	OP(235, SYS_ktimer_create) \
	OP(236, SYS_ktimer_delete) \
	OP(237, SYS_ktimer_settime) \
	OP(238, SYS_ktimer_gettime) \
	OP(239, SYS_ktimer_getoverrun) \
	OP(240, SYS_nanosleep) \
	OP(250, SYS_minherit) \
	OP(251, SYS_rfork) \
	OP(253, SYS_issetugid) \
	OP(254, SYS_netbsd_lchown) \
	OP(255, SYS_aio_read) \
	OP(256, SYS_aio_write) \
	OP(272, SYS_getdents) \
	OP(274, SYS_lchmod) \
	OP(276, SYS_lutimes) \
	OP(289, SYS_preadv) \
	OP(290, SYS_pwritev) \
	OP(304, SYS_kldload) \
	OP(305, SYS_kldunload) \
	OP(306, SYS_kldfind) \
	OP(307, SYS_kldnext) \
	OP(308, SYS_kldstat) \
	OP(309, SYS_kldfirstmod) \
	OP(310, SYS_getsid) \
	OP(311, SYS_setresuid) \
	OP(312, SYS_setresgid) \
	OP(314, SYS_aio_return) \
	OP(315, SYS_aio_suspend) \
	OP(316, SYS_aio_cancel) \
	OP(317, SYS_aio_error) \
	OP(321, SYS_yield) \
	OP(324, SYS_mlockall) \
	OP(325, SYS_munlockall) \
	OP(326, SYS___getcwd) \
	OP(327, SYS_sched_setparam) \
	OP(328, SYS_sched_getparam) \
	OP(329, SYS_sched_setscheduler) \
	OP(330, SYS_sched_getscheduler) \
	OP(331, SYS_sched_yield) \
	OP(332, SYS_sched_get_priority_max) \
	OP(333, SYS_sched_get_priority_min) \
	OP(334, SYS_sched_rr_get_interval) \
	OP(335, SYS_utrace) \
	OP(337, SYS_kldsym) \
	OP(340, SYS_sigprocmask) \
	OP(341, SYS_sigsuspend) \
	OP(343, SYS_sigpending) \
	OP(345, SYS_sigtimedwait) \
	OP(346, SYS_sigwaitinfo) \
	OP(359, SYS_aio_waitcomplete) \
	OP(360, SYS_getresuid) \
	OP(361, SYS_getresgid) \
	OP(362, SYS_kqueue) \
	OP(363, SYS_kevent) \
	OP(374, SYS___setugid) \
	OP(378, SYS_nmount) \
	OP(379, SYS_mtypeprotect) \
	OP(384, SYS___mac_get_proc) \
	OP(385, SYS___mac_set_proc) \
	OP(386, SYS___mac_get_fd) \
	OP(387, SYS___mac_get_file) \
	OP(388, SYS___mac_set_fd) \
	OP(389, SYS___mac_set_file) \
	OP(390, SYS_kenv) \
	OP(391, SYS_lchflags) \
	OP(392, SYS_uuidgen) \
	OP(393, SYS_sendfile) \
	OP(394, SYS_mac_syscall) \
	OP(395, SYS_getfsstat) \
	OP(396, SYS_statfs) \
	OP(397, SYS_fstatfs) \
	OP(400, SYS_ksem_close) \
	OP(401, SYS_ksem_post) \
	OP(402, SYS_ksem_wait) \
	OP(403, SYS_ksem_trywait) \
	OP(404, SYS_ksem_init) \
	OP(405, SYS_ksem_open) \
	OP(406, SYS_ksem_unlink) \
	OP(407, SYS_ksem_getvalue) \
	OP(408, SYS_ksem_destroy) \
	OP(409, SYS___mac_get_pid) \
	OP(410, SYS___mac_get_link) \
	OP(411, SYS___mac_set_link) \
	OP(415, SYS___mac_execve) \
	OP(416, SYS_sigaction) \
	OP(417, SYS_sigreturn) \
	OP(421, SYS_getcontext) \
	OP(422, SYS_setcontext) \
	OP(423, SYS_swapcontext) \
	OP(429, SYS_sigwait) \
	OP(430, SYS_thr_create) \
	OP(431, SYS_thr_exit) \
	OP(432, SYS_thr_self) \
	OP(433, SYS_thr_kill) \
	OP(434, SYS__umtx_lock) \
	OP(435, SYS__umtx_unlock) \
	OP(441, SYS_ksem_timedwait) \
	OP(442, SYS_thr_suspend) \
	OP(443, SYS_thr_wake) \
	OP(444, SYS_kldunloadf) \
	OP(454, SYS__umtx_op) \
	OP(455, SYS_thr_new) \
	OP(456, SYS_sigqueue) \
	OP(464, SYS_thr_set_name) \
	OP(465, SYS_aio_fsync) \
	OP(466, SYS_rtprio_thread) \
	OP(475, SYS_pread) \
	OP(476, SYS_pwrite) \
	OP(477, SYS_mmap) \
	OP(478, SYS_lseek) \
	OP(479, SYS_truncate) \
	OP(480, SYS_ftruncate) \
	OP(481, SYS_thr_kill2) \
	OP(482, SYS_shm_open) \
	OP(483, SYS_shm_unlink) \
	OP(484, SYS_cpuset) \
	OP(485, SYS_cpuset_setid) \
	OP(486, SYS_cpuset_getid) \
	OP(487, SYS_cpuset_getaffinity) \
	OP(488, SYS_cpuset_setaffinity) \
	OP(490, SYS_fchmodat) \
	OP(491, SYS_fchownat) \
	OP(493, SYS_fstatat) \
	OP(494, SYS_futimesat) \
	OP(495, SYS_linkat) \
	OP(496, SYS_mkdirat) \
	OP(497, SYS_mkfifoat) \
	OP(498, SYS_mknodat) \
	OP(499, SYS_openat) \
	OP(501, SYS_renameat) \
	OP(502, SYS_symlinkat) \
	OP(503, SYS_unlinkat) \
	OP(514, SYS_cap_new) \
	OP(515, SYS_cap_getrights) \
	OP(516, SYS_cap_enter) \
	OP(517, SYS_cap_getmode) \
	OP(518, SYS_pdfork) \
	OP(519, SYS_pdkill) \
	OP(520, SYS_pdgetpid) \
	OP(522, SYS_pselect) \
	OP(525, SYS_rctl_get_racct) \
	OP(526, SYS_rctl_get_rules) \
	OP(527, SYS_rctl_get_limits) \
	OP(528, SYS_rctl_add_rule) \
	OP(529, SYS_rctl_remove_rule) \
	OP(532, SYS_regmgr_call) \
	OP(533, SYS_jitshm_create) \
	OP(534, SYS_jitshm_alias) \
	OP(535, SYS_dl_get_list) \
	OP(536, SYS_dl_get_info) \
	OP(538, SYS_evf_create) \
	OP(539, SYS_evf_delete) \
	OP(540, SYS_evf_open) \
	OP(541, SYS_evf_close) \
	OP(542, SYS_evf_wait) \
	OP(543, SYS_evf_trywait) \
	OP(544, SYS_evf_set) \
	OP(545, SYS_evf_clear) \
	OP(546, SYS_evf_cancel) \
	OP(547, SYS_query_memory_protection) \
	OP(548, SYS_batch_map) \
	OP(549, SYS_osem_create) \
	OP(550, SYS_osem_delete) \
	OP(551, SYS_osem_open) \
	OP(552, SYS_osem_close) \
	OP(553, SYS_osem_wait) \
	OP(554, SYS_osem_trywait) \
	OP(555, SYS_osem_post) \
	OP(556, SYS_osem_cancel) \
	OP(557, SYS_namedobj_create) \
	OP(558, SYS_namedobj_delete) \
	OP(559, SYS_set_vm_container) \
	OP(560, SYS_debug_init) \
	OP(561, SYS_suspend_process) \
	OP(562, SYS_resume_process) \
	OP(563, SYS_opmc_enable) \
	OP(564, SYS_opmc_disable) \
	OP(565, SYS_opmc_set_ctl) \
	OP(566, SYS_opmc_set_ctr) \
	OP(567, SYS_opmc_get_ctr) \
	OP(568, SYS_budget_create) \
	OP(569, SYS_budget_delete) \
	OP(570, SYS_budget_get) \
	OP(571, SYS_budget_set) \
	OP(572, SYS_virtual_query) \
	OP(573, SYS_mdbg_call) \
	OP(580, SYS_eport_create) \
	OP(581, SYS_eport_delete) \
	OP(582, SYS_eport_trigger) \
	OP(583, SYS_eport_open) \
	OP(584, SYS_eport_close) \
	OP(585, SYS_is_in_sandbox) \
	OP(586, SYS_dmem_container) \
	OP(587, SYS_get_authinfo) \
	OP(588, SYS_mname) \
	OP(589, SYS_dynlib_dlopen) \
	OP(590, SYS_dynlib_dlclose) \
	OP(591, SYS_dynlib_dlsym) \
	OP(592, SYS_dynlib_get_list) \
	OP(593, SYS_dynlib_get_info) \
	OP(594, SYS_dynlib_load_prx) \
	OP(595, SYS_dynlib_unload_prx) \
	OP(596, SYS_dynlib_do_copy_relocations) \
	OP(597, SYS_dynlib_prepare_dlclose) \
	OP(598, SYS_dynlib_get_proc_param) \
	OP(599, SYS_dynlib_process_needed_and_relocate) \
	OP(600, SYS_sandbox_path) \
	OP(601, SYS_mdbg_service) \
	OP(602, SYS_randomized_path) \
	OP(603, SYS_rdup) \
	OP(604, SYS_dl_get_metadata) \
	OP(605, SYS_workaround8849) \
	OP(606, SYS_is_development_mode) \
	OP(607, SYS_get_self_auth_info) \
	OP(608, SYS_dynlib_get_info_ex) \
	OP(609, SYS_budget_getid) \
	OP(610, SYS_budget_get_ptype) \
	OP(611, SYS_get_paging_stats_of_all_threads) \
	OP(612, SYS_get_proc_type_info) \
	OP(613, SYS_get_resident_count) \
	OP(614, SYS_prepare_to_suspend_process) \
	OP(615, SYS_get_resident_fmem_count) \
	OP(616, SYS_thr_get_name) \
	OP(617, SYS_set_gpo) \
	OP(618, SYS_get_paging_stats_of_all_objects) \
	OP(619, SYS_test_debug_rwmem) \
	OP(620, SYS_free_stack) \
	OP(621, SYS_suspend_system) \
	OP(622, SYS_ipmimgr_call) \
	OP(623, SYS_get_gpo) \
	OP(624, SYS_get_vm_map_timestamp) \
	OP(625, SYS_opmc_set_hw) \
	OP(626, SYS_opmc_get_hw) \
	OP(627, SYS_get_cpu_usage_all) \
	OP(628, SYS_mmap_dmem) \
	OP(629, SYS_physhm_open) \
	OP(630, SYS_physhm_unlink) \
	OP(631, SYS_resume_internal_hdd) \
	OP(632, SYS_thr_suspend_ucontext) \
	OP(633, SYS_thr_resume_ucontext) \
	OP(634, SYS_thr_get_ucontext) \
	OP(635, SYS_thr_set_ucontext) \
	OP(636, SYS_set_timezone_info) \
	OP(637, SYS_set_phys_fmem_limit) \
	OP(638, SYS_utc_to_localtime) \
	OP(639, SYS_localtime_to_utc) \
	OP(640, SYS_set_uevt) \
	OP(641, SYS_get_cpu_usage_proc) \
	OP(642, SYS_get_map_statistics) \
	OP(643, SYS_set_chicken_switches) \
	OP(646, SYS_get_kernel_mem_statistics) \
	OP(647, SYS_get_sdk_compiled_version) \
	OP(648, SYS_app_state_change) \
	OP(649, SYS_dynlib_get_obj_member) \
	OP(650, SYS_budget_get_ptype_of_budget) \
	OP(651, SYS_prepare_to_resume_process) \
	OP(652, SYS_process_terminate) \
	OP(653, SYS_blockpool_open) \
	OP(654, SYS_blockpool_map) \
	OP(655, SYS_blockpool_unmap) \
	OP(656, SYS_dynlib_get_info_for_libdbg) \
	OP(657, SYS_blockpool_batch) \
	OP(658, SYS_fdatasync) \
	OP(659, SYS_dynlib_get_list2) \
	OP(660, SYS_dynlib_get_info2) \
	OP(661, SYS_aio_submit) \
	OP(662, SYS_aio_multi_delete) \
	OP(663, SYS_aio_multi_wait) \
	OP(664, SYS_aio_multi_poll) \
	OP(665, SYS_aio_get_data) \
	OP(666, SYS_aio_multi_cancel) \
	OP(667, SYS_get_bio_usage_all) \
	OP(668, SYS_aio_create) \
	OP(669, SYS_aio_submit_cmd) \
	OP(670, SYS_aio_init) \
	OP(671, SYS_get_page_table_stats) \
	OP(672, SYS_dynlib_get_list_for_libdbg)

enum OrbisSyscallNr {
#define ENUM_OP(value, name) name = value,
	ORBIS_SYSCALL_TABLE(ENUM_OP)
#undef ENUM_OP
};

static std::map<OrbisSyscallNr, const char *> bsd_syscall_strings_map = {
#define STRING_OP(value, name) { name, #name },
	ORBIS_SYSCALL_TABLE(STRING_OP)
#undef STRING_OP
};

static inline std::string to_string(OrbisSyscallNr nr) {
	const auto &it = bsd_syscall_strings_map.find(nr);
	if (it == bsd_syscall_strings_map.end()) {
		return std::string("UNKNOWN_SYSCALL ") + "(" + std::to_string((uint) nr) + ")";
	} else {
		return it->second;
	}
}